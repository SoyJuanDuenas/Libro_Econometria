---
title: "Primeros Pasos y Estructuras de Datos"
---

## Acerca de R

R es un lenguaje de programación y entorno de desarrollo estadistico gratuito y de codigo abierto, cualquier persona puede descargarlo, utilizarlo y modificarlo. Esto permite que tenga una gran comunidad y documentación bien detallada de cada una de sus funcionalidades y paquetes, R es un lenguaje orientado a objetos lo que significa que los datos se organizan en objetos que se pueden manipular y analiza., R cuenta con una interfaz gráfica de usuario llamada RStudio que facilita el trabajo con el lenguaje y permite la creación y visualización de datos de manera sencilla.

R permite hacer diferentes tipos de analisis, Estadistica Descriptiva, Estadistica Bayesiana, Modelos Estado Espacio, entre otros. Es decir en R podemos hacer macroeconometria, microeconometria, econometría fianciera, evaluación de impacto, econometría bayesiana, econometria espacial entre otros analisis estadisticos.

## Interfaz de RStudio

RStudio proporciona una interfaz gráfica de usuario (GUI) que facilita el trabajo con R, lo que lo hace más accesible para los usuarios que no están familiarizados con la programación en línea de comandos.

Al ingresar a RStudio nos vamos a encontrar con cuatro principales paneles:

![](Vista%20General%20RStudio.png)

1.  **Editor :** En el editor será donde colocaremos el codigo y los comandos de ejecución.
2.  **Consola:** Alli veremos los resultados o los outputs del codigo.
3.  **Espacio de Trabajo:** Aqui podemos ver el historial de comandos que hemos usado, las diferentes variables, datasets, objetos y funciones que hemos declarado entre otras cosas
4.  **Archivos / graficas / paquetes:** Allí podremos visualizar los plots que generemos en el codigo, las librerias que tengamos instaladas, los archivos de nuestro PC entre otros

Nos vamos a centrar en el trabajo que se hace en el primer panel.

## Comentarios

Es una buena practica comentar nuestro codigo, esto significa ir colocando texto no ejecutable que explique que esta haciendo nuestro codigo, esto nos facilitará a nosotros y a otras personas más adelante corregir y entender lo que estamos haciendo, para comentar el codigo usamos el `#`, el texto que se encuentre despues del numeral no será ejecutado.

```{r}
#Esto es un comentario
```

## Paquetes y limpieza de entorno

R siempre guarda las diferentes variables, datasets entre otros objetos, es por esto que es una buena practica al principio de cada codigo limipar nuestro entorno, esto lo hacemos con el siguiente comando.

```{r}
remove(list = ls())
```

Dado que R es un lenguaje Open Source, los usuarios pueden crear paquetes para facilitar o realizar nuevas operaciones que R base no puede. Sin embargo, para hacer uso de estos paquetes debemos instalarlos y luego activarlos, la instalación solo se hace una vez mientras que la activación si debe hacerse al abrir RStudio de nuevo. Es una buena practica activar todos los paquetes en las primeras lineas de codigo.

```{r}
#| output: false
options(repos = c(CRAN = "http://cran.rstudio.com"))
install.packages("dplyr")
install.packages("ggplot2")
```

```{r}
#| output: false
library(dplyr)
library(ggplot2)
```

## Operadores Aritmeticos

R incluye varios operadores aritmeticos que se utilizan para realizar operaciones matematicas. Los operadores aritmeticos incluyen:

-   `+` : Suma dos números

-   `-` : Resta dos números

-   `*` : Multiplica dos números

-   `/` : Divide dos números

-   `**` : Eleva un número a una potencia

## Operadores logicos y de comparación

Los operadores logicos se utilizan para combinar expresiones lógicas y producir un resultado verdadero o falso. Además, se pueden utilizar los operadores de comparación para crear expresiones lógicas. Los operadores logicos y de comparación entre vectores de las matrices son los siguientes:

```{r}
a = 2
#Elementos mayores o iguales a j en el vector
a>=4

#Elementos menores o iguales a j en el vector
a<=4

#Elementos iguales a j en el vector
a==4

b = 2
#Elementos diferentes a i en el vector
b!=6

#Dos afirmaciones verdaderas: "&"
a>=1 & b==3 # Recuerden que & es un "y" matemático

#Al menos una es cierta: "|"
a>=1 | b==3 # Recuerden que | es un "o" matemático

#Negación: "!"
!a < 0 #a no es menor que cero
```

## Na y NaN

Cuando el codigo nos reporta un dato Na tenemos un missing value, es decir, datos vacios. Por otra parte cuando tenemos un NaN se traduce como un "non a number" es decir que el resultado de la operación no se puede calcular dado que es indeterminado

## Variables y tipos de objetos

Diremos que una variable es un "contenedor de información" en la que podemos "guardar" diferentes objetos, generalmente se escriben en minúscula, sin espacios ni tildes, comas, puntos, signos de interrogación o cualquier otro caracter a excepción del guión bajo, para declarar variable en R podemos usar \<- como tambien =

Para notación de este libro usaremos unicamente el igual.

```{r}
nombre_de_la_variable <- "Valor de la variable"
nombre_de_la_variable = "Valor de la variable"
```

para visualizar nuestra variable en la consola (Panel #2) debemos llamarla de nuevo, utilizar la función print o podemos usar un ; y volver a llamar la función en la misma linea

```{r}
nombre_de_la_variable
print(nombre_de_la_variable)
nombre_de_la_variable = "Valor de la variable"; nombre_de_la_variable
```

Los objetos que guardamos en las variables pueden ser de diferentes tipos y en función de esto la forma de guardarlos cambia, en R existen los siguientes tipos de objetos:

-   **Numericos:** datos que tienen numeros, pueden ser continuos (admiten decimales) o discretos (no admiten decimales)

-   **Logicos:** Solo admiten dos valores, `True` o `False`

-   **Caracteres:** Cadena de caracteres, lease palabras

-   **Complejos:** Objetos que pertenecen al plano complejo

```{r}
objeto_numeric = 3
objeto_logic = FALSE
objeto_character = "Hola Mundo"
objeto_complex = 1+0i
```

Para verificar de que tipo o clase es un objeto podemos usar la función `class`, puede darse el caso de que se necesite convertir un objeto de un tipo a otro tipo, para esto usamos alguna de las siguientes funciones según corresponda

```{r}
x = 1
class(x)

as.numeric(x)
as.logical(x)
as.character(x)
```

Para hacer operaciones entre variables nos aseguramos que las variables sean de tipo numerico y operamos:

```{r}
a = 5
b = 7

c = a + b
c
```

## Estructuras de datos

Una colección puede contener varios objetos o elementos en determinado orden o estructura, Las colecciones son fundamentales y se utilizan para almacenar y manipular datos. se organizan por su dimensión (1ra, 2da, varias dimensiones) y si son homogeneas (todos los objetos deben ser del mismo tipo) o heterogeneas, a continuación detallaremos las principales estructuras de datos usadas en R

### Vectores

Los vectores son estructuras de una dimensionalidad homogenea, estos son entes matematicos que se usan para guardar objetos finitos de cierto tipo especifico, para crear vectores en R debemos usar el comando `c()`, los vectores nos permiten hacer operaciones entre varios datos al mismo tiempo sin tener que recurrir a bucles, existen cuatro tipos de vectores clasificados según el tipo de dato que contienen:

-   **Numeric:** En R los vectores numericos son numeric por defecto (admiten decimales)

-   **Character:** Vector de caracteres o tambien denominados string

-   **Logical:** Solo pueden tomar tres posibles valores `TRUE`, `FALSE` y `NA` los vectores lógicos son usualmente el resultado de operadores lógicos o de comparación

-   **Interger:** En R los vectores numericos son numeric por defecto (admiten decimales), si queremos un interger (numero entero que no admite decimales) añadimos la letra L después del número

```{r}
vector_numerico = c(25,5,3,6,3,6)
vector_de_caracteres = c("Hola", "mundo")
vector_logico = c(FALSE, TRUE, FALSE, TRUE)
```

Para comprobar el tipo de vector usamos:

```{r}
typeof(vector_logico)
```

Como con los vectores solamente se pueden guardar un tipo de dato, si llegamos a introducir diferentes tipos de datos, el vector automaticamente va a transformar estos datos para que el vector quede solamente en función de un tipo de dato siguiendo el siguiente orden:

$$
\text{logical < interger < double < character}
$$

En donde se ponderará más los tipos de la derecha que los de la izquerda

```{r}
y <- c(1.7, "a")   ## character
y <- c(TRUE, 2)    ## numeric
y <- c("a", TRUE)  ## character

```

Podemos crear vectores con determinadas caracteristicas de manera eficiente, por ejemplo:

```{r}
#Crear un vector secuencia 1 a 1.
Dias = 0:15; Dias

#Crar un vector secuencia que avance cada j unidades: seq(a,b,j)
Medicion = seq(1,5, 0.5); Medicion

#Crear un vector donde los objetos se repiten n veces: rep(objeto,n)
Numerico = rep(1,10); Numerico
#Crear un vector de repeticiones
Dummy = c(rep(0,5), rep(1,10), rep(0,5)); Dummy

```

Para concatenar vectores simplemente debemos:

```{r}
vector_a = c(2,54,3)
vector_b = c(3,7,8)
vector_c = c(vector_a, vector_b); vector_c

```

Las operaciones con vectores funcionan de manera similar a las operaciones con variables, en ultimas seguimos operando variables solo que en este caso las variables no contienen un solo valor sino contienen un vector de valores. Los vectores entre si deben ser iguales o multiplos. En caso de ser iguales se hará la operación uno a uno, en cambio si son multiplos se repetira la operación en los diferentes vectores, tal que:

```{r}
#Operación uno a uno
vector_a = c(2,54,3)
vector_b = c(3,7,8)
vector_c = vector_a + vector_b; vector_c
#Operación entre multiplos
vector_a = c(2,54,3,4,8,5)
vector_b = c(3,7,8)
vector_c = vector_a + vector_b; vector_c
```

podemos hacer estadistica descriptiva de los vectores usando la función summary

```{r}
summary(vector_a)
```

entre otros posibles metodos de la clase vector tenemos

```{r}
#describir cuales son los elementos que no se repiten del vector
unique(vector_a)

#Ordenar elementos de menor a mayor
sort(vector_a)  

#Posición ordenada de menor a mayor
order(vector_a) 

#Ordenar elementos de mayor a menor:
sort(vector_a, decreasing = TRUE)       

```

En ocasiones queremos acceder a una parte del vector, o incluso a un solo elemento, para esto usamos los corchetes cuadrados \[ \]. R a diferencia de Python es base 1 por esto empezamos a contar desde 1 los elementos.

```{r}
v = c("uno", "dos", "tres", "cuatro")
nuevo_vector = v[c(1,3,2)]; nuevo_vector
```

En la anterior linea de codigo creamos un vector de caracteres con los numeros desde el uno hasta el cuatro. Posterior a esto, guardamos en un vector llamado nuevo_vector el primer, el tercer y el segundo elemento del vector v

Los valores negativos eliminan los elementos en las posiciones mencionadas

```{r}
v = v[c(-2)];v
```

En la anterior linea de codigo al vector v le eliminamos el segundo elemento y sobreescribimos el vector v con los cambios realizados.

### Matrices

Una matriz es una colección de datos bidimensional que consiste en un conjunto de elementos del mismo tipo organizados en filas y columnas. (bidimensional y homogeneo) Se puede representar como una tabla o cuadrícula de números o valores. Cada elemento en la matriz se identifica por su posición que se determina por el número de fila y columna.

Para crear matrices en R podemos hacerlo directamente o a partir de vectores previamente creados, para crear matrices directamente usamos:

```{r}
MAT1=matrix(1:10,nrow = 5,byrow = TRUE);MAT1 
MAT2=matrix(10:19,ncol=5, nrow = 2, byrow = FALSE);MAT2
```

Donde el primer parametro corresponde a con que vamos a llenar esas matrices, este intervalo debe ser multiplo del número de filas o columnas que queremos crear, el segundo parametro corresponderá a si vamos a hacer la creación de la matriz desde la columna o desde las filas, podemos tambien hacerlo desde ambas.

Ahora bien, si queremos crear matrices a partir de vectores ya establecidos previamente usaremos el siguiente codigo:

```{r}
a = c(1,4,5,7,9,7,10,6,5,7,9)
b = c(3,4,6,8,2,3,11,1,2,5,6)
MAT3 = cbind(a,b); MAT3
MAT4 = rbind(a,b); MAT4 
```

Como nos podemos dar cuenta al usar vectores tambien podemos crear las matrices desde las filas o desde las columnas.

Las matrices tienen formas de operarse de manera diferente a los escalares o constantes, por lo cual vamos a detallar cada una de las operaciones principales:

```{r}
#Suma escalar - matriz
MAT1 + 10

#Suma matriz - matriz
MAT3 + t(MAT4)

#Multiplicar escalar - matriz
MAT3*10

```

Podemos crerar trambien matrices especiales

```{r}
#Matriz Transpuesta: t() 
t(MAT1) 

#Matriz identidad: diag()
diag(5)

#Matriz diagonal: diag()
Mat_diag = diag(1:10)
```

Finalmente calcularemos la multiplicación matricial que recordemos no se hace punto a punto sino por medio de un proceso diferente, tambien la inversa de una matriz y su determinante

```{r}
#Producto de matrices
dim(MAT3) #conocer las dimensiones de una matriz: 11x2
dim(MAT4) #2x11, son multiplicable. por ende:

MAT3%*%MAT4

#Inversa de una matriz: solve()
solve(Mat_diag)

#Determinante de la matriz: det()
det(Mat_diag)
```

Estos anteriores procesos en caso de no cumplir con determinadas caracteristicas no se pueden llevar a cabo, solo se puede invertir matrices que su determinante sea diferente de 0, entre otras caracteristicas.

En R podemos usar la función `solve()` para resolver sistemas de ecuaciones lineales. Por ejemplo, si tenemos el siguiente sistema:

$$
Ax = b
$$

$$
3x + 2y = 5
$$

$$
x-y = 0
$$

el cual expresado matricialmente se expresa como:

$$
\begin{bmatrix}
 3 & 2 \\
 1 & -1 \\
\end{bmatrix}
\begin{bmatrix}
 x \\
 y \\
\end{bmatrix}
=
\begin{bmatrix}
 5\\
 0\\
\end{bmatrix}
$$

Podemos resolver el sistema de ecuaciones en R del siguiente modo:

```{r}
A = matrix(c(3,2,1,-1), ncol = 2, byrow = TRUE)
b = c(5, 0)
solve(A, b)
```

Para acceder a elementos especificos de la matriz debemos hacer uso del indice en formato (x,y) tal que sea (fila, columna)

```{r}
MAT2
#Mostrar el elemento ij de la matriz: MAT[i,j]
MAT2[2,1]
MAT2[1,2]
```

podemos hacer esto tambien para mostrar solo una fila o solo una columna de la matriz

```{r}
MAT2
#Mostrar los elementos de la fila i: MAT[i,]
MAT2[1,]

#Mostrar los elmentos de la columna j: MAT[,j]
MAT2[,1]
```

Para mejor entendimiento de nuestra matriz podemos cambiarle los nombres a las filas y las columnas, esto nos facilitará el trabajo posterior.

```{r}
rownames(MAT1) = c("a","b","c","d","e")
colnames(MAT1) = c("f","g")
MAT1
```

Si queremos añadir columnas y filas a nuestras matrices creadas con anterioridad podemos emplear las funciones `cbind()` y `rbind()` respectivamente

```{r}
MAT1=matrix(1:10,nrow = 5,byrow = TRUE)
MAT1 = rbind(MAT1, c(30,30));MAT1
```

```{r}
MAT1=matrix(1:10,nrow = 5,byrow = TRUE)
MAT1 = cbind(MAT1, c(30,30,30,30,30));MAT1
```

Para eliminar filas usaremos \[-i,\] mientra que para eliminar columnas utilizaremos la notación \[ , -j\]

```{r}
MAT1 = MAT1[-5,]; MAT1
```

```{r}
MAT1 = MAT1[,-3]; MAT1
```

### Listas

### Dataframes

## PENDIENTES

Completar listas y dataframes, pasar los de titulo 2 a titulo 1 y los de titulo 3 a titulo 2 y hacer de los diferentes metodos de las estructuras de datos titulos 3, cambiar a str las matrices especiales y disminuir su dimensionalidad.
